---
title: "A Grammer of Graphics Primer with Plotnine"
author: "Luke Roy"
format: revealjs
---

# 📊 Part 1 - What is Grammar of Graphics?

**The Grammar of Graphics is a logically consistent language and set of rules for creating statistical graphics.**

**It provides a structured way to build visualizations by breaking them down into independent components.**

---

## 🏗️ GG Components

Each plot in **Plotnine (Python's ggplot equivalent)** consists of the following core components:

- **📊 Data** – What you're visualizing; the foundation of all GG plots.
- **🎨 Aesthetics (`aes`)** – How data values are **mapped** to visual properties (e.g., x, y, color, size, shape).
- **📐 Geometry (`geom_*`)** – The type of plot (**points, lines, bars, histograms, violins, etc.**).
- **🖼 Facets (`facet_*`)** – Splitting the data into **small multiples** (subset/display of multiple graphs).
- **📈 Statistics (`stat_*`)** – Computed summaries (**aggregations, density estimates, trend lines**).
- **🎛 Scales (`scale_*`)** – **Axis transformations, color mapping, legend formatting**.
- **🗺 Coordinates (`coord_*`)** – Different coordinate systems (**polar, cartesian, flipped**).
- **🎨 Theme (`theme_*`)** – Controls how **non-data elements** (titles, grids, labels, backgrounds) will look.

---

✅ **By combining these elements, we can create nearly any statistical visualization!** 

While Python offers powerful visualization libraries like **Matplotlib, Seaborn, and Plotly**, each with its own strengths, **Plotnine stands out** because it is built entirely on the **Grammar of Graphics framework**. This provides:  
- **A standardized, layered approach** to visualization.  
- **Elegant and sophisticated visuals** with minimal code.  
- **Better flexibility for complex statistical graphics** without excessive customization.  

For these reasons, **Plotnine is one of the best tools for data visualization**, especially when working with structured datasets and statistical analyses.  



In the next section, we’ll start building a **step-by-step Plotnine visualization** using NYC crash data. 🚗💥

# 🏙️ Part 2 - Plotnine visualization of NYC crash data


## 🚗 NYC Crash Data - Overview  
This dataset contains records of **motor vehicle collisions in NYC**.  

We will make use of:
- **Date & time** of crashes
- **Number of injuries**
- **Borough where the crash happened**
- **Primary contributing factor**  

## Step 1 - Data  

The **data** component is the foundation of every plot, it provides the information that will be visualized.  

In Plotnine, the most common approach is to use a **Pandas DataFrame** as the data source. While other formats can work, **Pandas is the best practice** since Plotnine is built on top of it. These two libraries are designed to work efficiently together, making data manipulation and visualization hassle free. 


```{python}
import pandas as pd

# Load dataset from GitHub
url = "https://raw.githubusercontent.com/statds/ids-s25/refs/heads/main/data/nyccrashes_2024w0630_by20250212.csv"
df = pd.read_csv(url)

# Show first few rows + confirm everything worked😁
df.head()

```

## Step 2 - Creating a Basic Grammar of Graphics Plot  

Plotnine syntax is structured **like a mathematical formula**—you define the **Grammar of Graphics components** and combine them using the **`+` operator**.  

To create a basic Plotnine visualization, we need to specify how raw data should be translated into graphical elements.  


```{python}
from plotnine import ggplot, aes, geom_point

# Basic scatter plot
(ggplot(df, aes(x="date", y="injuries")) + geom_point())

# Breakdown of components:
# ggplot = grammar of graphics plot
# df = our data
# aes = aesthetics
# geom_point = geometry (no argument creates a scatterplot)
```

## Step 3 - Extracting further information

Plotnine has a myriad of different options for visualizing data, and some ways are more informative and helpful than others.

Let's change the geometry of our plot, and aggregate total injuries to see if any new infomration is revealed

```{python}
# Aggregate injuries per day
df_daily = df.groupby("date").agg({"injuries": "sum"}).reset_index()

# Line plot to show trends
(ggplot(df_daily, aes(x="date", y="injuries")) + geom_line())



```